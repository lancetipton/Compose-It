{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./README.md","webpack://[name]/./src/example/markdown.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","iconMap","install","dependencies","features","theme","tools","custom-tools","settings","styles","compose-it-api","editor-api","full-example","headerFilter","document","addEventListener","compHW","getElementById","markDown","markdownit","html","xhtmlOut","breaks","langPrefix","linkify","typographer","quotes","highlight","innerHTML","render","Array","from","getElementsByTagName","map","link","setAttribute","navList","element","id","linkWrp","createElement","cleaned","innerText","toLowerCase","replace","indexOf","concat","className","appendChild","addNavItem"],"mappings":"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","file":"markdown.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"markdown\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"markdown\"] = factory();\n\telse\n\t\troot[\"markdown\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","export default \"# Compose It ( WYSIWYG Editor )\\n\\nA small (141kb) and customizable content editor. Check out the [demo](https://lancetipton.github.io/Compose-It/)\\n\\n## Install\\n\\n  * Download the repo\\n    ```js\\n      // Clone repo\\n      git clone https://github.com/lancetipton/composeIt.git\\n      // Or Add to package.json\\n      \\\"dependencies\\\": {\\n        \\\"ComposeIt\\\": \\\"git+https://github.com/lancetipton/composeIt.git\\\"\\n        ...\\n      },\\n    ```\\n  * Add to your code\\n    ```js\\n      // * Import into code\\n        import ComposeIt from 'ComposeIt'\\n        // Or only the methods you need\\n        import { exec, init, registerTools, registerTheme } from 'ComposeIt'\\n\\n      // * Require code\\n        const ComposeIt = require('ComposeIt')\\n      \\n      // * Add as html script\\n        <script src='/path/to/composeIt/build/ComposeIt.min.js'></script>\\n        // ComposeIt will be available on the window \\n        <script>\\n          const composeIt = window.ComposeIt\\n          const Editor = composeIt.init({ ...settings })\\n        </script>\\n    ```\\n\\n## Dependencies\\n\\n  * [Font Awesome](http://fontawesome.com)\\n    * Used for icons\\n  * Install\\n    ```bash\\n      yarn install @fortawesome/fontawesome-free\\n    ```\\n\\n## Features\\n\\n  * Two Editor Types\\n    * Static\\n      * Normal WYSIWYG layout\\n    * Pop-Up\\n      * Editor moves as content is added, following the cursor\\n\\n  * Customizable Theme\\n    * See theme section below for more information\\n    * Two Themes - light / dark ( default is dark )\\n\\n  * Customizable Tools\\n    * All tools can be overwritten\\n    * Easy to add custom tools\\n      * Call the `ComposeIt.registerTools({ ...tool object })`\\n        * Includes helper for building tool icon\\n        * `ComposeIt.registerTools.buildIcon('FA icon type \\\"fas || far\\\"', 'tool text')`\\n    * See tools section below for more information\\n\\n  * Lots of other custom settings\\n    * See settings section\\n\\n## Theme\\n\\n  * Defaults\\n    ```js\\n      const theme = {\\n        theme: 'dark',\\n        colors: {\\n          toolBorder: '#bfbec3',\\n          toolColor: '#bfbec3',\\n          toolHover: '#03a9f4',\\n          background: '#242a35',\\n          commit: '#4caf50',\\n          danger: '#fa0719',\\n          toolSelected: '#03a9f4',\\n        },\\n        fonts: {\\n          btn: `sans-serif`\\n        },\\n        speeds: {\\n          showTools: '0.75s ease-in-out'\\n        },\\n        shadow: '2px 2px 8px rgba(0,0,0,0.2)'\\n      }\\n    ```\\n\\n  * Update default theme\\n\\n    * `ComposeIt.registerTheme({ ...css in js styles })`\\n      * Must be called before calling the `ComposeIt.init` method\\n      * Below code will overwrite the default white color, and the showTools speed **ONLY**\\n      ```js\\n        ComposeIt.registerTheme({\\n          colors: {\\n            toolHover: '#FFFFFF',\\n          },\\n          speeds: {\\n            showTools: '0.20s'\\n          }\\n        })\\n      ```\\n\\n## Tools\\n\\n  * **Important** Only tools passed into the `ComposeIt.init` call will be added to the editor, unless `settings.allowDefTools` is set to `true`\\n  \\n      ```js\\n        const settings = { tools: [ 'bold', 'underline' ] }\\n        ComposeIt.init(settings)\\n      ```\\n      * Only the bold and underline tool will appear in the editor\\n      * **NO** other tools will be added\\n\\n  * Default tools\\n    * redo\\n    * undo\\n    * bold\\n    * italic\\n    * underline\\n    * strikethrough\\n    * heading ( Dropdown )\\n      * heading1\\n      * heading2\\n      * heading3\\n      * heading4\\n      * heading5\\n      * heading6\\n    * dent ( Dropdown )\\n      * indent\\n      * outdent\\n    * align ( Dropdown )\\n      * justifyLeft\\n      * justifyCenter\\n      * justifyRight\\n      * justifyFull\\n    * script ( Dropdown )\\n      * subscript\\n      * superscript\\n    * paragraph\\n    * quote\\n    * list ( Dropdown )\\n      * olist\\n      * ulist\\n    * code\\n    * line\\n    * link\\n    * image\\n\\n## Custom Tools\\n\\n\\n  * Custom tool properties\\n      * icon ( String )\\n        * html string\\n      * title ( String )\\n        * Name of the tool\\n        * Set as the button title property, that is shown when tool is `hovered`\\n      * name ( String )\\n        * Key of the tool in the `Default tools` object\\n        * Must match one of the keys from the `Default tools` section above to override that tool\\n        * Or used to define a custom tool when registering it\\n        * **REQUIRED** when added to the tools array\\n        * **NOT REQUIRED** when registering a tool with the `ComposeIt.registerTools` method\\n      * key ( Array )\\n        * Optional\\n        * Must be an array of the keyboard cmd that will execute the action\\n        * At least one modifier key is required for all key commands\\n        * Modifier key can be one of `shift, alt, ctrl, cmd`\\n        * More then one modifier or key can be added to the array\\n        * Example\\n          * `key: [ 'cmd', 'alt', 'u', 'q' ]`\\n          * User must press `cmd+alt+u+q` to execute the action\\n          * Keys do **NOT** need to be pressed in the same order\\n            * Array Order is **NOT** considered\\n      * el ( String )\\n        * html string element; i.e. ```\\\"<p>\\\"```\\n        * passed to `document.execCommand` when `action` property is `formatBlock || insertHTML`\\n      * cmd ( String )\\n        * If set to 'dropdown', will toggle its sub-tools dropdown if it exists\\n        * Else, value is passed to the `document.execCommand` when `action` property is `exec`\\n      * options ( Object )\\n        * Holds sub-tools as key / value pair\\n          * key - name of the tool\\n          * value - tool object\\n        * **IMPORTANT** - For sub-tools to be built, `cmd` property must be set to `dropdown`\\n      * action ( String | Function )\\n        * Called when the tool is pressed\\n        * If a string, must be one of\\n          * `exec`\\n            * calls the `document.execCommand`, passing in the `cmd` property of the tool\\n          * `formatBlock` || `insertHTML`\\n            * calls the `document.execCommand`, passing in the `el` property of the tool\\n        * If a Function\\n          * Function is bound to the editor dom node element, and called\\n            * Params are passed in this order\\n              * tool, settings, button, event\\n\\n  * Add custom tool **Global** ( Must be called before init method )\\n\\n      ```js\\n        ComposeIt.registerTools({\\n          alert: {\\n            icon: ComposeIt.registerTools.buildIcon(`fas fa-exclamation`),\\n            title: 'Alert',\\n            key: [ 'alt', 'a' ],\\n            action: (tool, settings, button, e) => {\\n              // Will show this alert when tool button is pressed\\n              alert('Added alert tool!')\\n            }\\n          }\\n        })\\n      ```\\n\\n  * Add custom tool to editor instance **Only**\\n\\n      ```js\\n        ComposeIt.init({\\n          // ...other settings\\n          tools: [\\n            // ...other tools\\n            {\\n              name: 'alert'\\n              key: [ 'alt', 'a' ],\\n              icon: ComposeIt.registerTools.buildIcon(`fas fa-exclamation`),\\n              title: 'Alert',\\n              action: (tool, settings, button, e) => {\\n                // Will show this alert when tool button is pressed\\n                alert('Added alert tool!')\\n              }\\n            }\\n          ]\\n        })\\n      ```\\n\\n  * Overwrite default tool **Global** ( Must be called before init method )\\n\\n      ```js\\n        ComposeIt.registerTools({\\n          link: {\\n            icon: ComposeIt.registerTools.buildIcon(`fas fa-link`),\\n            // User must press `cmd+alt+k+u` to execute the action\\n            key: [ 'cmd', 'alt', 'k', 'u' ],\\n            title: 'Link',\\n            action: (tool, settings, button, e) => {\\n              alert('Overwrite the link action with www.google.com')\\n              // Will add a link to google every time the link button is pressed\\n              // Use the exec command to update the editor\\n              ComposeIt.exec('CreateLink', 'www.google.com')\\n            }\\n          }\\n        })\\n      ```\\n\\n  * Overwrite default tool for editor instance **Only**\\n    * name property is **REQUIRED**\\n\\n      ```js\\n        ComposeIt.init({\\n          // ...other settings\\n          tools: [\\n            // ...other tools\\n            {\\n              // REQUIRED - must be one from the list defined in default tools section above\\n              name: 'link',\\n              // Key is optional\\n              // The user must press `shift+ctrl+x` to execute the action\\n              key: [ 'shift', 'ctrl', 'x' ],\\n              icon: ComposeIt.registerTools.buildIcon(`fas fa-link`),\\n              title: 'Link',\\n              action: (tool, settings, button, e) => {\\n                alert('Overwrite the link action with www.google.com')\\n                // Will add a link to google every time the link button is pressed\\n                // Use the exec command to update the editor\\n                ComposeIt.exec('CreateLink', 'www.google.com')\\n              }\\n            }\\n          ]\\n        })\\n      ```\\n\\n## Settings\\n\\n\\n  * Overwrite default settings\\n    * Pass the settings object to the on init call\\n      ```js\\n        const Editor = ComposeIt.init({\\n          // ...custom settings object\\n        })\\n      ```\\n  * Default settings\\n    ```js\\n      const settings = {\\n        // Dom node to bind the editor to ( REQUIRED )\\n        element: undefined,\\n\\n        // Sets the width of the content editor ( Static Editor ONLY )\\n        // If set to true, will set the content area to the parents width\\n        // If not set, width will be set to '100%'\\n        matchParentWidth: undefined,\\n        \\n        // Initial content for the editor\\n          // * If not set, will use element.innerHTML\\n          // * IMPORTANT - gets set every time the init method is called on the element\\n        content: 'I am the initial content',\\n        \\n        // Overrides the the innerHTML of the element with the passed in content ( above )\\n        // If not set, it will try to use the elements innerHTML\\n        // If the element is empty, it will use the content setting above\\n        overRideContent: false\\n        \\n        // Should the editor be destroyed after the save button is pressed\\n        destroyOnSave: true,\\n\\n        // Should the editor be destroyed after the cancel button is pressed\\n        destroyOnCancel: true,\\n\\n        // Limit the calls to the onChange method to improve performance\\n        // Uses debounce to call the onChange method every 50ms\\n        changeDebounce: 50,\\n\\n        // Uses Font Awesome pro by default\\n        // Works with Font Awesome free as well by setting to 'fas'\\n        iconType: 'far',\\n\\n        // element to be used to separate paragraphs\\n        defaultParagraphSeparator: 'div',\\n\\n        // Editor classes used when building styles\\n        // update the value change to custom classes\\n        classes: {\\n          ROOT: 'composer-wysisyg',\\n          HIDDEN: 'composer-hidden',\\n          SHOW: 'composer-show',\\n          TOOL_BAR: 'composer-tool-bar',\\n          BTN_TOOL: 'composer-btn',\\n          BTN_GRP: 'composer-btn-group',\\n          BTN_DROP_LIST: 'composer-btn-drop-list',\\n          BTN_WRAP: 'composer-btn-wrapper',\\n          BTN_SELECTED: 'composer-button-selected',\\n          CONTENT: 'composer-content',\\n          WRAPPER: 'composer-wrapper',\\n          BTN_CONTENT: 'composer-content-action',\\n          BTN_SAVE: 'composer-btn-save',\\n          BTN_CANCEL: 'composer-btn-cancel',\\n          CODE_EDITOR: `composer-code-edit`\\n        },\\n\\n        // Allows customizing the styles of the editor for each instance of the editor\\n        // See styles section for more information\\n        styles: {\\n          // Add styles to customize the pop up editor\\n          pop: {},\\n          // Add styles to customize the static editor\\n          static: {},\\n        },\\n\\n        // Offsets the editor pop-up relative to the cursor - ( Pop Editor )\\n        offset: {\\n          x: 0,\\n          y: 35\\n        },\\n        \\n        /* -- Mutation Observer ( on change event )  -- */\\n        // Defaults to watching everything\\n        // Set to property to false to not call onChange for that property\\n        observer: {\\n          attributes: true,\\n          childList: true,\\n          characterData: true,\\n          subtree: true,\\n        },\\n        /* -- Tools  -- */\\n        // Set true to allow not passing a tools array, and have all tools added to the editor\\n        allowDefTools: undefined  // ( boolean )\\n        \\n        // Tools to be included in the editor ( White list )\\n          // * Tool names must be added for tool to exist in the editor\\n          // * Only tools added to this list will show in the Editor\\n          // * Global Custom tools must be registered before calling init\\n        tools: [\\n          //... Can be a string from the list defined in default tools section above\\n          //... Or an object as defined in the `editor instance` tools sections above\\n        ],\\n\\n        // Show the Editor tools when clicking on the edit content element - ( Pop Editor )\\n        showOnClick: true,\\n\\n        // Style the content with inline css\\n        styleWithCSS: false,\\n\\n        // popper.js options from https://popper.js.org\\n        popper: {\\n          removeOnDestroy: true,\\n          placement: 'bottom-start',\\n          modifiers: {\\n            offset: { offset: 5 },\\n            keepTogether: { enabled: true },\\n            preventOverflow: {\\n              enabled: true,\\n              padding: 10,\\n              escapeWithReference: false,\\n            }\\n          }\\n        },\\n\\n        /* -- Callback Methods  -- */\\n          // * Default to undefined\\n          // * Set as a function to use\\n          // * Return false to bypass the default method action\\n        \\n        // Logs an event message when the event is fired\\n        log: false\\n\\n        // Called when the Editor content is changed\\n        onChange: undefined\\n          \\n        // Called when Editor save button is pressed\\n          // * Only shown in the editor when it's defined\\n          // * Destroys the editor\\n          // * return false, to bypass call to Editor.destroy\\n        onSave: undefined\\n\\n        // Called when the Editor cancel button is pressed\\n          // * Only shown in the editor when it's defined\\n          // * Destroys the editor\\n          // * return false, to bypass call to Editor.destroy\\n        onCancel: undefined\\n\\n        // Called when a selection is changed in the Editor Content\\n        onSelect: undefined\\n\\n        // Called when a key is pressed\\n        onKeyDown: undefined\\n\\n        // Called when a key is depressed\\n        onKeyUp: undefined\\n\\n        // Called when the Editor is clicked on\\n        onClick: undefined\\n\\n        // Called when the Editor tools position updates\\n        onUpdateToolPos: undefined\\n\\n        // Called when the Editor tools are toggled\\n        onToggleTools: undefined\\n      }\\n    ```\\n\\n## Styles\\n\\n\\n  * Each editor gets its own style id, which applies only to that editor\\n    * Updating the theme will only apply to editors built after update has been applied\\n\\n  * Override the default styles with the `settings.styles.pop || settings.styles.static`\\n\\n  * `pop || static` should be an object that looks similar to below\\n    ```js\\n      settings.styles[ pop || static ] = {\\n        root: {},\\n        editorWrp: {},\\n        toolBar: {},\\n        toolGrp: {},\\n        toolList: {},\\n        toolWrp: {},\\n        toolFirstWrp: {},\\n        dropList: {},\\n        dropListItem: {},\\n        btnWrpShow: {},\\n        dropListOpen: {},\\n        tool: {},\\n        toolFirst: {},\\n        toolHover: {},\\n        toolSelected: {},\\n        contentBtn: {},\\n        contentBtnHover: {},\\n        contentBtnText: {},\\n        saveBtn: {},\\n        saveBtnHover: {},\\n        cancelBtn: {},\\n        cancelBtnHover: {},\\n        toolBar: {},\\n        contentBtn: {},\\n        content: {},\\n        code_editor: {}\\n      }\\n    ```\\n\\n  * Inside each property, add override styles with `CSS in JS` format\\n\\n  * Styles are applied by editor type\\n    * Static editor will only get static styles, same for pop up editor\\n\\n  * Example - `settings.styles.pop = { editorWrp: { backgroundColor: '#1a1a1a' } }`\\n    * Only the editorWrp backgroundColor style will be over written for pop up editors\\n    * All other styles till apply\\n  \\n\\n## Compose It API\\n\\n  * init\\n    * Example \\n      ```js\\n        const settings = {\\n          tools: [ 'redo', 'undo', 'bold', 'italic', 'underline' ],\\n          styleWithCSS: true,\\n          onChange: (html) => { console.log(html) }\\n        }\\n        const Editor = ComposeIt.init(settings)\\n      ```\\n    * param 1\\n      * Settings object, see more in the settings section above\\n    * returns **Editor Object**\\n      * See more information in the Editor API methods section below \\n\\n  * exec\\n    * Example\\n      ```js\\n        ComposeIt.exec('CreateLink', 'www.google.com')\\n      ```\\n      * param 1\\n        * **Required**\\n        * String of command to execute\\n        * See list of exec commands => https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\\n      * param 2\\n        * Value to be passed to the exec command ( Based on param 1 )\\n\\n  * registerTools\\n    * Example - see example in the tools section above\\n\\n  * registerTheme\\n    * Example - see example in the theme section above\\n\\n## Editor API\\n\\n  * Returned from the **ComposeIt.init** method\\n\\n  * buttons ( Class )\\n    * Buttons Manager for managing Editor Tool buttons\\n\\n  * composition ( Object )\\n    * Holds start and end callback when browser enters a composition state\\n    * Useful for special characters\\n\\n  * contentEl ( Dom Node )\\n    * Element the Editor is attached to\\n\\n  * destroy ( Function )\\n    * Cleans up the editor and event handlers\\n\\n  * isActive ( Bool ) - ( Pop Editor )\\n    * If the pop up editor is active\\n\\n  * onClick ( Function )\\n    * method called when the editor is clicked on\\n\\n  * onContentChange ( Function )\\n    * method called when the editor content is changed\\n\\n  * onKeyDown ( Function )\\n    * method called when editor is active an a key is pressed\\n\\n  * onSelChange ( Function )\\n    * method called when the editor content is selected\\n\\n  * popper ( Object )\\n    * object returned when calling `new Popper` method in popper js\\n\\n  * toggleTools ( Function ) - ( Pop Editor )\\n    * method to turn the Editor tools on or off\\n\\n  * updateToolsPos ( Function ) - ( Pop Editor )\\n    * method to update the position of the Editor tools\\n    \\n** Editor API Notes**\\n  * Editor methods are bound to Dom Events\\n    * If you try to override the methods of the editor, you're going to have a bad time\\n\\n## Full Example\\n\\n  ```html\\n    <head>\\n      <link rel=\\\"stylesheet\\\" href=\\\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\\\" integrity=\\\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\\\" crossorigin=\\\"anonymous\\\">\\n      <script src=\\\"ComposeIt.min.js\\\"></script>\\n    </head>\\n    <body>\\n      <div class=\\\"editor editor-pop\\\" id=\\\"editor-pop\\\">\\n        Default editor content\\n      </div>\\n      <button class=\\\"button fas fa-times\\\" id=\\\"add-pop-editor\\\" >\\n        <span>\\n          Add\\n        </span>\\n      </button>\\n      <button class=\\\"button fas fa-times\\\" id=\\\"destroy-pop-editor\\\" >\\n        <span>\\n          Destroy\\n        </span>\\n      </button>\\n    <script>\\n      const compose = window.ComposeIt\\n      compose.registerTools({\\n        // Custom defined tool\\n        alert: {\\n          icon: compose.registerTools.buildIcon(`fas fa-exclamation`),\\n          key: [ 'alt', 'a' ],\\n          title: 'Alert',\\n          action: (tool, settings, button, e) => {\\n            // Will show alert when clicked\\n            alert('Added alert tool!')\\n          }\\n        },\\n        // Override the default link tool\\n        link: {\\n          icon: compose.registerTools.buildIcon(`fas fa-link`),\\n          title: 'Link',\\n          key: [ 'cmd', 'k' ],\\n          action: (tool, settings, button, e) => {\\n            alert('Overwrite the link action with www.google.com')\\n            // Use the exec command to update the editor\\n            compose.exec('CreateLink', 'www.google.com')\\n          }\\n        },\\n      })\\n\\n      compose.registerTheme({\\n        colors: {\\n          white: '#f1f1f1',\\n        },\\n        speeds: {\\n          showTools: '0.20s'\\n        }\\n      })\\n\\n      const options = {\\n        element: document.getElementById('editor-pop'),\\n        onChange: (html) => console.log(html),\\n        onSave: (html) => console.log(html),\\n        onCancel: () => console.log('on cancel'),\\n        iconType: 'fas',\\n        tools: [\\n          'redo',\\n          'undo',\\n          'bold',\\n          'italic',\\n          'align',\\n          'underline',\\n          'strikethrough',\\n          // Add global custom tool ( name / key )\\n          'alert',\\n          // Add editor instance ONLY tool\\n          {\\n            // name is REQUIRED\\n            name: 'alert2',\\n            icon: compose.registerTools.buildIcon(`fas fa-exclamation`),\\n            title: 'Alert TOO',\\n            action: (tool, settings, button, e) => {\\n              // Will show alert when clicked\\n              alert('I am Alert 2!')\\n            }\\n          }\\n        ]\\n      }\\n\\n      const Editor = compose.init(options)\\n      const destBtn = document.getElementById('destroy-pop-editor')\\n      destBtn.addEventListener('click', e => {\\n        Editor && Editor.destroy()\\n        Editor = null\\n      })\\n\\n      const addBtn = document.getElementById('add-pop-editor')\\n      addBtn.addEventListener('click', e => {\\n        if (Editor) return\\n        Editor = compose.init(options)\\n      })\\n    </script>\\n    </body>\\n    </html>\\n  ```\"","import ReadMe from '../../README.md'\n\nconst iconMap = {\n  install: '<i class=\"fas fa-clipboard-check\"></i>',\n  dependencies: '<i class=\"fas fa-plug\"></i>',\n  features: '<i class=\"fab fa-font-awesome-flag\"></i>',\n  theme: '<i class=\"fas fa-palette\"></i>',\n  tools: '<i class=\"fas fa-tools\"></i>',\n  'custom-tools': '<i class=\"fas fa-hammer\"></i>',\n  settings: '<i class=\"fas fa-magic\"></i>',\n  styles: '<i class=\"fas fa-paint-brush\"></i>',\n  'compose-it-api': '<i class=\"fas fa-atom\"></i>',\n  'editor-api': '<i class=\"fas fa-atom\"></i>',\n  'full-example': '<i class=\"fas fa-book-open\"></i>',\n}\n\nconst headerFilter = [\n  'editor-api',\n  'custom-tools',\n  'dependencies',\n]\n\nconst addNavItem = (navList, element) => {\n  const linkWrp = document.createElement('li')\n  const link = document.createElement('a')\n  const cleaned = element\n    .innerText\n    .toLowerCase()\n    .replace(/ /g, '-')\n\n  if (headerFilter.indexOf(cleaned) !== -1) return\n\n  element.id = `compose-nav-${cleaned}`\n  link.setAttribute('href', `#${element.id}`)\n  link.innerHTML = `${iconMap[cleaned] || ''}\\n${element.innerText}`\n  link.className = 'compose-link'\n  linkWrp.appendChild(link)\n  linkWrp.className = 'compose-link-wrapper'\n  navList.appendChild(linkWrp)\n}\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\n\n  const compHW = document.getElementById('markdown-content')\n\n  const markDown = window.markdownit({\n    html: false,\n    xhtmlOut: false,\n    breaks: false,\n    langPrefix: 'language-',\n    linkify: false,\n    typographer: false,\n    quotes: '“”‘’',\n    highlight: () => ('')\n  })\n\n  compHW.innerHTML = markDown.render(ReadMe)\n\n  Array.from(document.getElementsByTagName('a'))\n    .map(link => {\n      link.setAttribute('target', '_blank')\n    })\n\n  const navList = document.getElementById('nav-list')\n  navList && Array.from(compHW.getElementsByTagName('h2'))\n    .map(element => {\n      if (!element.id) addNavItem(navList, element)\n    })\n\n\n})\n"],"sourceRoot":""}