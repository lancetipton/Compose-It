!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("markdown",[],n):"object"==typeof exports?exports.markdown=n():e.markdown=n()}(window,function(){return function(e){var n={};function t(o){if(n[o])return n[o].exports;var s=n[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,t),s.l=!0,s.exports}return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)t.d(o,s,function(n){return e[n]}.bind(null,s));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=3)}({3:function(e,n,t){"use strict";t.r(n);var o={install:'<i class="fas fa-clipboard-check"></i>',dependencies:'<i class="fas fa-plug"></i>',features:'<i class="fab fa-font-awesome-flag"></i>',theme:'<i class="fas fa-palette"></i>',tools:'<i class="fas fa-tools"></i>',"custom-tools":'<i class="fas fa-hammer"></i>',settings:'<i class="fas fa-magic"></i>',styles:'<i class="fas fa-paint-brush"></i>',"compose-it-api":'<i class="fas fa-atom"></i>',"editor-api":'<i class="fas fa-atom"></i>',"full-example":'<i class="fas fa-book-open"></i>'},s=["editor-api","custom-tools","dependencies"];document.addEventListener("DOMContentLoaded",function(){var e=document.getElementById("markdown-content"),n=window.markdownit({html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:function(){return""}});e.innerHTML=n.render("# Compose It ( WYSIWYG Editor )\n\nA small (141kb) and customizable content editor. Check out the [demo](https://lancetipton.github.io/Compose-It/)\n\n## Install\n\n  * Download the repo\n    ```js\n      // Clone repo\n      git clone https://github.com/lancetipton/composeIt.git\n      // Or Add to package.json\n      \"dependencies\": {\n        \"ComposeIt\": \"git+https://github.com/lancetipton/composeIt.git\"\n        ...\n      },\n    ```\n  * Add to your code\n    ```js\n      // * Import into code\n        import ComposeIt from 'ComposeIt'\n        // Or only the methods you need\n        import { exec, init, registerTools, registerTheme } from 'ComposeIt'\n\n      // * Require code\n        const ComposeIt = require('ComposeIt')\n      \n      // * Add as html script\n        <script src='/path/to/composeIt/build/ComposeIt.min.js'><\/script>\n        // ComposeIt will be available on the window \n        <script>\n          const composeIt = window.ComposeIt\n          const Editor = composeIt.init({ ...settings })\n        <\/script>\n    ```\n\n## Dependencies\n\n  * [Font Awesome](http://fontawesome.com)\n    * Used for icons\n  * Install\n    ```bash\n      yarn install @fortawesome/fontawesome-free\n    ```\n\n## Features\n\n  * Two Editor Types\n    * Static\n      * Normal WYSIWYG layout\n    * Pop-Up\n      * Editor moves as content is added, following the cursor\n\n  * Customizable Theme\n    * See theme section below for more information\n    * Two Themes - light / dark ( default is dark )\n\n  * Customizable Tools\n    * All tools can be overwritten\n    * Easy to add custom tools\n      * Call the `ComposeIt.registerTools({ ...tool object })`\n        * Includes helper for building tool icon\n        * `ComposeIt.registerTools.buildIcon('FA icon type \"fas || far\"', 'tool text')`\n    * See tools section below for more information\n\n  * Lots of other custom settings\n    * See settings section\n\n## Theme\n\n  * Defaults\n    ```js\n      const theme = {\n        theme: 'dark',\n        colors: {\n          toolBorder: '#bfbec3',\n          toolColor: '#bfbec3',\n          toolHover: '#03a9f4',\n          background: '#242a35',\n          commit: '#4caf50',\n          danger: '#fa0719',\n          toolSelected: '#03a9f4',\n        },\n        fonts: {\n          btn: `sans-serif`\n        },\n        speeds: {\n          showTools: '0.75s ease-in-out'\n        },\n        shadow: '2px 2px 8px rgba(0,0,0,0.2)'\n      }\n    ```\n\n  * Update default theme\n\n    * `ComposeIt.registerTheme({ ...css in js styles })`\n      * Must be called before calling the `ComposeIt.init` method\n      * Below code will overwrite the default white color, and the showTools speed **ONLY**\n      ```js\n        ComposeIt.registerTheme({\n          colors: {\n            toolHover: '#FFFFFF',\n          },\n          speeds: {\n            showTools: '0.20s'\n          }\n        })\n      ```\n\n## Tools\n\n  * **Important** Only tools passed into the `ComposeIt.init` call will be added to the editor, unless `settings.allowDefTools` is set to `true`\n  \n      ```js\n        const settings = { tools: [ 'bold', 'underline' ] }\n        ComposeIt.init(settings)\n      ```\n      * Only the bold and underline tool will appear in the editor\n      * **NO** other tools will be added\n\n  * Default tools\n    * redo\n    * undo\n    * bold\n    * italic\n    * underline\n    * strikethrough\n    * heading ( Dropdown )\n      * heading1\n      * heading2\n      * heading3\n      * heading4\n      * heading5\n      * heading6\n    * dent ( Dropdown )\n      * indent\n      * outdent\n    * align ( Dropdown )\n      * justifyLeft\n      * justifyCenter\n      * justifyRight\n      * justifyFull\n    * script ( Dropdown )\n      * subscript\n      * superscript\n    * paragraph\n    * quote\n    * list ( Dropdown )\n      * olist\n      * ulist\n    * code\n    * line\n    * link\n    * image\n\n## Custom Tools\n\n\n  * Custom tool properties\n      * icon ( String )\n        * html string\n      * title ( String )\n        * Name of the tool\n        * Set as the button title property, that is shown when tool is `hovered`\n      * name ( String )\n        * Key of the tool in the `Default tools` object\n        * Must match one of the keys from the `Default tools` section above to override that tool\n        * Or used to define a custom tool when registering it\n        * **REQUIRED** when added to the tools array\n        * **NOT REQUIRED** when registering a tool with the `ComposeIt.registerTools` method\n      * key ( Array )\n        * Optional\n        * Must be an array of the keyboard cmd that will execute the action\n        * At least one modifier key is required for all key commands\n        * Modifier key can be one of `shift, alt, ctrl, cmd`\n        * More then one modifier or key can be added to the array\n        * Example\n          * `key: [ 'cmd', 'alt', 'u', 'q' ]`\n          * User must press `cmd+alt+u+q` to execute the action\n          * Keys do **NOT** need to be pressed in the same order\n            * Array Order is **NOT** considered\n      * el ( String )\n        * html string element; i.e. ```\"<p>\"```\n        * passed to `document.execCommand` when `action` property is `formatBlock || insertHTML`\n      * cmd ( String )\n        * If set to 'dropdown', will toggle its sub-tools dropdown if it exists\n        * Else, value is passed to the `document.execCommand` when `action` property is `exec`\n      * options ( Object )\n        * Holds sub-tools as key / value pair\n          * key - name of the tool\n          * value - tool object\n        * **IMPORTANT** - For sub-tools to be built, `cmd` property must be set to `dropdown`\n      * action ( String | Function )\n        * Called when the tool is pressed\n        * If a string, must be one of\n          * `exec`\n            * calls the `document.execCommand`, passing in the `cmd` property of the tool\n          * `formatBlock` || `insertHTML`\n            * calls the `document.execCommand`, passing in the `el` property of the tool\n        * If a Function\n          * Function is bound to the editor dom node element, and called\n            * Params are passed in this order\n              * tool, settings, button, event\n\n  * Add custom tool **Global** ( Must be called before init method )\n\n      ```js\n        ComposeIt.registerTools({\n          alert: {\n            icon: ComposeIt.registerTools.buildIcon(`fas fa-exclamation`),\n            title: 'Alert',\n            key: [ 'alt', 'a' ],\n            action: (tool, settings, button, e) => {\n              // Will show this alert when tool button is pressed\n              alert('Added alert tool!')\n            }\n          }\n        })\n      ```\n\n  * Add custom tool to editor instance **Only**\n\n      ```js\n        ComposeIt.init({\n          // ...other settings\n          tools: [\n            // ...other tools\n            {\n              name: 'alert'\n              key: [ 'alt', 'a' ],\n              icon: ComposeIt.registerTools.buildIcon(`fas fa-exclamation`),\n              title: 'Alert',\n              action: (tool, settings, button, e) => {\n                // Will show this alert when tool button is pressed\n                alert('Added alert tool!')\n              }\n            }\n          ]\n        })\n      ```\n\n  * Overwrite default tool **Global** ( Must be called before init method )\n\n      ```js\n        ComposeIt.registerTools({\n          link: {\n            icon: ComposeIt.registerTools.buildIcon(`fas fa-link`),\n            // User must press `cmd+alt+k+u` to execute the action\n            key: [ 'cmd', 'alt', 'k', 'u' ],\n            title: 'Link',\n            action: (tool, settings, button, e) => {\n              alert('Overwrite the link action with www.google.com')\n              // Will add a link to google every time the link button is pressed\n              // Use the exec command to update the editor\n              ComposeIt.exec('CreateLink', 'www.google.com')\n            }\n          }\n        })\n      ```\n\n  * Overwrite default tool for editor instance **Only**\n    * name property is **REQUIRED**\n\n      ```js\n        ComposeIt.init({\n          // ...other settings\n          tools: [\n            // ...other tools\n            {\n              // REQUIRED - must be one from the list defined in default tools section above\n              name: 'link',\n              // Key is optional\n              // The user must press `shift+ctrl+x` to execute the action\n              key: [ 'shift', 'ctrl', 'x' ],\n              icon: ComposeIt.registerTools.buildIcon(`fas fa-link`),\n              title: 'Link',\n              action: (tool, settings, button, e) => {\n                alert('Overwrite the link action with www.google.com')\n                // Will add a link to google every time the link button is pressed\n                // Use the exec command to update the editor\n                ComposeIt.exec('CreateLink', 'www.google.com')\n              }\n            }\n          ]\n        })\n      ```\n\n## Settings\n\n\n  * Overwrite default settings\n    * Pass the settings object to the on init call\n      ```js\n        const Editor = ComposeIt.init({\n          // ...custom settings object\n        })\n      ```\n  * Default settings\n    ```js\n      const settings = {\n        // Dom node to bind the editor to ( REQUIRED )\n        element: undefined,\n\n        // Sets the width of the content editor ( Static Editor ONLY )\n        // If set to true, will set the content area to the parents width\n        // If not set, width will be set to '100%'\n        matchParentWidth: undefined,\n        \n        // Initial content for the editor\n          // * If not set, will use element.innerHTML\n          // * IMPORTANT - gets set every time the init method is called on the element\n        content: 'I am the initial content',\n        \n        // Overrides the the innerHTML of the element with the passed in content ( above )\n        // If not set, it will try to use the elements innerHTML\n        // If the element is empty, it will use the content setting above\n        overRideContent: false\n        \n        // Should the editor be destroyed after the save button is pressed\n        destroyOnSave: true,\n\n        // Should the editor be destroyed after the cancel button is pressed\n        destroyOnCancel: true,\n\n        // Limit the calls to the onChange method to improve performance\n        // Uses debounce to call the onChange method every 50ms\n        changeDebounce: 50,\n\n        // Uses Font Awesome pro by default\n        // Works with Font Awesome free as well by setting to 'fas'\n        iconType: 'far',\n\n        // element to be used to separate paragraphs\n        defaultParagraphSeparator: 'div',\n\n        // Editor classes used when building styles\n        // update the value change to custom classes\n        classes: {\n          ROOT: 'composer-wysisyg',\n          HIDDEN: 'composer-hidden',\n          SHOW: 'composer-show',\n          TOOL_BAR: 'composer-tool-bar',\n          BTN_TOOL: 'composer-btn',\n          BTN_GRP: 'composer-btn-group',\n          BTN_DROP_LIST: 'composer-btn-drop-list',\n          BTN_WRAP: 'composer-btn-wrapper',\n          BTN_SELECTED: 'composer-button-selected',\n          CONTENT: 'composer-content',\n          WRAPPER: 'composer-wrapper',\n          BTN_CONTENT: 'composer-content-action',\n          BTN_SAVE: 'composer-btn-save',\n          BTN_CANCEL: 'composer-btn-cancel',\n          CODE_EDITOR: `composer-code-edit`\n        },\n\n        // Allows customizing the styles of the editor for each instance of the editor\n        // See styles section for more information\n        styles: {\n          // Add styles to customize the pop up editor\n          pop: {},\n          // Add styles to customize the static editor\n          static: {},\n        },\n\n        // Offsets the editor pop-up relative to the cursor - ( Pop Editor )\n        offset: {\n          x: 0,\n          y: 35\n        },\n        \n        /* -- Mutation Observer ( on change event )  -- */\n        // Defaults to watching everything\n        // Set to property to false to not call onChange for that property\n        observer: {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true,\n        },\n        /* -- Tools  -- */\n        // Set true to allow not passing a tools array, and have all tools added to the editor\n        allowDefTools: undefined  // ( boolean )\n        \n        // Tools to be included in the editor ( White list )\n          // * Tool names must be added for tool to exist in the editor\n          // * Only tools added to this list will show in the Editor\n          // * Global Custom tools must be registered before calling init\n        tools: [\n          //... Can be a string from the list defined in default tools section above\n          //... Or an object as defined in the `editor instance` tools sections above\n        ],\n\n        // Show the Editor tools when clicking on the edit content element - ( Pop Editor )\n        showOnClick: true,\n\n        // Style the content with inline css\n        styleWithCSS: false,\n\n        // popper.js options from https://popper.js.org\n        popper: {\n          removeOnDestroy: true,\n          placement: 'bottom-start',\n          modifiers: {\n            offset: { offset: 5 },\n            keepTogether: { enabled: true },\n            preventOverflow: {\n              enabled: true,\n              padding: 10,\n              escapeWithReference: false,\n            }\n          }\n        },\n\n        /* -- Callback Methods  -- */\n          // * Default to undefined\n          // * Set as a function to use\n          // * Return false to bypass the default method action\n        \n        // Logs an event message when the event is fired\n        log: false\n\n        // Called when the Editor content is changed\n        onChange: undefined\n          \n        // Called when Editor save button is pressed\n          // * Only shown in the editor when it's defined\n          // * Destroys the editor\n          // * return false, to bypass call to Editor.destroy\n        onSave: undefined\n\n        // Called when the Editor cancel button is pressed\n          // * Only shown in the editor when it's defined\n          // * Destroys the editor\n          // * return false, to bypass call to Editor.destroy\n        onCancel: undefined\n\n        // Called when a selection is changed in the Editor Content\n        onSelect: undefined\n\n        // Called when a key is pressed\n        onKeyDown: undefined\n\n        // Called when a key is depressed\n        onKeyUp: undefined\n\n        // Called when the Editor is clicked on\n        onClick: undefined\n\n        // Called when the Editor tools position updates\n        onUpdateToolPos: undefined\n\n        // Called when the Editor tools are toggled\n        onToggleTools: undefined\n      }\n    ```\n\n## Styles\n\n\n  * Each editor gets its own style id, which applies only to that editor\n    * Updating the theme will only apply to editors built after update has been applied\n\n  * Override the default styles with the `settings.styles.pop || settings.styles.static`\n\n  * `pop || static` should be an object that looks similar to below\n    ```js\n      settings.styles[ pop || static ] = {\n        root: {},\n        editorWrp: {},\n        toolBar: {},\n        toolGrp: {},\n        toolList: {},\n        toolWrp: {},\n        toolFirstWrp: {},\n        dropList: {},\n        dropListItem: {},\n        btnWrpShow: {},\n        dropListOpen: {},\n        tool: {},\n        toolFirst: {},\n        toolHover: {},\n        toolSelected: {},\n        contentBtn: {},\n        contentBtnHover: {},\n        contentBtnText: {},\n        saveBtn: {},\n        saveBtnHover: {},\n        cancelBtn: {},\n        cancelBtnHover: {},\n        toolBar: {},\n        contentBtn: {},\n        content: {},\n        code_editor: {}\n      }\n    ```\n\n  * Inside each property, add override styles with `CSS in JS` format\n\n  * Styles are applied by editor type\n    * Static editor will only get static styles, same for pop up editor\n\n  * Example - `settings.styles.pop = { editorWrp: { backgroundColor: '#1a1a1a' } }`\n    * Only the editorWrp backgroundColor style will be over written for pop up editors\n    * All other styles till apply\n  \n\n## Compose It API\n\n  * init\n    * Example \n      ```js\n        const settings = {\n          tools: [ 'redo', 'undo', 'bold', 'italic', 'underline' ],\n          styleWithCSS: true,\n          onChange: (html) => { console.log(html) }\n        }\n        const Editor = ComposeIt.init(settings)\n      ```\n    * param 1\n      * Settings object, see more in the settings section above\n    * returns **Editor Object**\n      * See more information in the Editor API methods section below \n\n  * exec\n    * Example\n      ```js\n        ComposeIt.exec('CreateLink', 'www.google.com')\n      ```\n      * param 1\n        * **Required**\n        * String of command to execute\n        * See list of exec commands => https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\n      * param 2\n        * Value to be passed to the exec command ( Based on param 1 )\n\n  * registerTools\n    * Example - see example in the tools section above\n\n  * registerTheme\n    * Example - see example in the theme section above\n\n## Editor API\n\n  * Returned from the **ComposeIt.init** method\n\n  * buttons ( Class )\n    * Buttons Manager for managing Editor Tool buttons\n\n  * composition ( Object )\n    * Holds start and end callback when browser enters a composition state\n    * Useful for special characters\n\n  * contentEl ( Dom Node )\n    * Element the Editor is attached to\n\n  * destroy ( Function )\n    * Cleans up the editor and event handlers\n\n  * isActive ( Bool ) - ( Pop Editor )\n    * If the pop up editor is active\n\n  * onClick ( Function )\n    * method called when the editor is clicked on\n\n  * onContentChange ( Function )\n    * method called when the editor content is changed\n\n  * onKeyDown ( Function )\n    * method called when editor is active an a key is pressed\n\n  * onSelChange ( Function )\n    * method called when the editor content is selected\n\n  * popper ( Object )\n    * object returned when calling `new Popper` method in popper js\n\n  * toggleTools ( Function ) - ( Pop Editor )\n    * method to turn the Editor tools on or off\n\n  * updateToolsPos ( Function ) - ( Pop Editor )\n    * method to update the position of the Editor tools\n    \n** Editor API Notes**\n  * Editor methods are bound to Dom Events\n    * If you try to override the methods of the editor, you're going to have a bad time\n\n## Full Example\n\n  ```html\n    <head>\n      <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\" integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\" crossorigin=\"anonymous\">\n      <script src=\"ComposeIt.min.js\"><\/script>\n    </head>\n    <body>\n      <div class=\"editor editor-pop\" id=\"editor-pop\">\n        Default editor content\n      </div>\n      <button class=\"button fas fa-times\" id=\"add-pop-editor\" >\n        <span>\n          Add\n        </span>\n      </button>\n      <button class=\"button fas fa-times\" id=\"destroy-pop-editor\" >\n        <span>\n          Destroy\n        </span>\n      </button>\n    <script>\n      const compose = window.ComposeIt\n      compose.registerTools({\n        // Custom defined tool\n        alert: {\n          icon: compose.registerTools.buildIcon(`fas fa-exclamation`),\n          key: [ 'alt', 'a' ],\n          title: 'Alert',\n          action: (tool, settings, button, e) => {\n            // Will show alert when clicked\n            alert('Added alert tool!')\n          }\n        },\n        // Override the default link tool\n        link: {\n          icon: compose.registerTools.buildIcon(`fas fa-link`),\n          title: 'Link',\n          key: [ 'cmd', 'k' ],\n          action: (tool, settings, button, e) => {\n            alert('Overwrite the link action with www.google.com')\n            // Use the exec command to update the editor\n            compose.exec('CreateLink', 'www.google.com')\n          }\n        },\n      })\n\n      compose.registerTheme({\n        colors: {\n          white: '#f1f1f1',\n        },\n        speeds: {\n          showTools: '0.20s'\n        }\n      })\n\n      const options = {\n        element: document.getElementById('editor-pop'),\n        onChange: (html) => console.log(html),\n        onSave: (html) => console.log(html),\n        onCancel: () => console.log('on cancel'),\n        iconType: 'fas',\n        tools: [\n          'redo',\n          'undo',\n          'bold',\n          'italic',\n          'align',\n          'underline',\n          'strikethrough',\n          // Add global custom tool ( name / key )\n          'alert',\n          // Add editor instance ONLY tool\n          {\n            // name is REQUIRED\n            name: 'alert2',\n            icon: compose.registerTools.buildIcon(`fas fa-exclamation`),\n            title: 'Alert TOO',\n            action: (tool, settings, button, e) => {\n              // Will show alert when clicked\n              alert('I am Alert 2!')\n            }\n          }\n        ]\n      }\n\n      const Editor = compose.init(options)\n      const destBtn = document.getElementById('destroy-pop-editor')\n      destBtn.addEventListener('click', e => {\n        Editor && Editor.destroy()\n        Editor = null\n      })\n\n      const addBtn = document.getElementById('add-pop-editor')\n      addBtn.addEventListener('click', e => {\n        if (Editor) return\n        Editor = compose.init(options)\n      })\n    <\/script>\n    </body>\n    </html>\n  ```"),Array.from(document.getElementsByTagName("a")).map(function(e){e.setAttribute("target","_blank")});var t=document.getElementById("nav-list");t&&Array.from(e.getElementsByTagName("h2")).map(function(e){e.id||function(e,n){var t=document.createElement("li"),i=document.createElement("a"),r=n.innerText.toLowerCase().replace(/ /g,"-");-1===s.indexOf(r)&&(n.id="compose-nav-".concat(r),i.setAttribute("href","#".concat(n.id)),i.innerHTML="".concat(o[r]||"","\n").concat(n.innerText),i.className="compose-link",t.appendChild(i),t.className="compose-link-wrapper",e.appendChild(t))}(t,e)})})}})});
//# sourceMappingURL=markdown.min.js.map